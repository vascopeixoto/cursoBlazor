@inject HttpClient _client;
<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Vehicle: </label>
            <div>
                <select @bind="booking.VehicleId" class="form-control">
                    <option value="">-- Select Vehicle --</option>
                    @if (Vehicles != null)
                    {
                        foreach (var item in Vehicles)
                        {
                            <option value="@item.Id">@item.Brand.Name @item.Model.Name | @item.LicensePlateNumber </option>
                        }
                    }
                </select>
                <ValidationMessage For="@(()=>booking.VehicleId)" />
            </div>

        </div>

        <div class="form-group">
            <label>Customer: </label>
            <div>
                <select @bind="booking.CustomerId" class="form-control">
                    <option value="">-- Select Customer --</option>
                    @if (Customers != null)
                    {
                        foreach (var item in Customers)
                        {
                            <option value="@item.Id">@item.EmailAddress</option>
                        }
                    }
                </select>
                <ValidationMessage For="@(()=>booking.CustomerId)" />
            </div>

        </div>

        <div class="form-group">
            <label>Date Out:</label>
            <div>
                <InputDate @bind-Value="@booking.DateOut" class="form-control" />
                <ValidationMessage For="@(()=>booking.DateOut)" />
            </div>
        </div>

        @if (booking.Id > 0)
        {
            <div class="form-group">
                <label>Date In:</label>
                <div>
                    <InputDate @bind-Value="@booking.DateIn" class="form-control" />
                    <ValidationMessage For="@(()=>booking.DateIn)" />
                </div>
            </div>
        }

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">@ButtonText</button>
    }

    <BackToList Target="bookings" />
</EditForm>

@code{
    private IList<Vehicle> Vehicles;
    private IList<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
}